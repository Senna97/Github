1. 수업 소개
소스코드의 변경 사항을 관리하는 도구를 버전 관리시스템이라고 하고 현시점에서 가장 많이 사용되는 버전 관리시스템이 바로 Git이다.
Github.com: 버전을 통해서 만들어진 각각의 파일을 백업하고 타인에게 공유해서 여러 사람이 공동으로 작업할 수 있게 해주는 온라인 서비스

우리가 Github를 배워야 하는 이유?
대부분의 개발자들이 Github.com을 알고 이용하고 있기 때문이다. 

 

2. 저장소 생성
New 버튼을 눌러 Repository(저장소)를 만들 수 있다. 또는 프로필 옆 + 버튼을 통해서도 만들 수 있다. 
Public: 누구나 볼 수 있는 저장소, 오픈소스 프로젝트를 하겠다는 의미이다.
Private: 비밀 저장소, 이 저장소는 만든 사람 or 초대된 사용자만이 볼 수 있다. 

다른 프로젝트를 사용하고 싶을 때(소스코드나 파일이 필요할 때)
Clone of download 버튼 → Download ZIP
상단바에 commits는 파일들의 변화를 나타내는 버전 수이며 commits 중 첫 번째 리스트는 가장 최근에 수정된 버전이다. 그 속에 담긴 내용은 이전 버전과 비교했을 때 추가된 내용이면 초록색, 제거된 내용이면 빨간색으로 나타낸다.

 

3. 버전 생성
Repository에 Create new file 혹은 upload files를 할 수 있다.
파일을 업로드했을 때 변화가 생긴 파일만을 버전에 등록해준다. (굉장히 편리)

 

4. Git 구경하기
① 내 컴퓨터에서 작업한 내용을 쉽게 원격 저장소에 업로드하기 위해서는 내 컴퓨터에 Git 프로그램이 깔려있어야 한다. 
② 내 컴퓨터와 이 Github를 연결시켜 서로가 파일을 주고받을 수 있도록 하기 위해서는 Github 상에서의 주소를 알아내야 한다. (Code 버튼을 클릭해 확인할 수 있음, https://github.com/WDSeohyeon/Github.git)

git clone https://github.com/WDSeohyeon/Github.git → Github 상에 있는 저장소를 내 컴퓨터로 복제
git diff → 수정한 것 찾기
git add 파일 이름. txt
git commit -m "버전 이름" → 버전 생성
git log → history 보기
git push → 컴퓨터에서 만든 버전을 Github로 업로드해서 상태가 같아지도록 동기화 (지역 저장소의 버전을 원격 저장소로 push)
git status → 현재 상태 보기

 

5. 멤버
Github를 사용하는 중요한 이유 중 하나가 협업이다. 여러 사람이 하나의 프로젝트를 함께 진행할 때, 토론하고 코드나 버전을 공유하고 성과 지표들을 보는 공간이 Github의 저장소이다. 
Settings → Manage access → Invite a collaborator 

 

6. 이슈
다른 사람과 저장소를 꾸려가는 데 있어서 가장 중요한 것은 커뮤니케이션이다. 소통을 잘하는 것이 핵심
Issue를 통해 소통을 할 수 있다. Issues는 쉽게 말해 문제점을 의논하기 위한 게시판
Issue를 등록할 때, 효과적이기 위해서는 Assignees(담당자)와 Labels(일종의 카테고리)를 지정하면 좋다. 
Issue가 해결되면 Close issue(삭제는 아님)

 

7. 수업을 마치며
Pull requests: Fork 혹은 Clone 해 온 프로젝트를 수정했는데 보다 유용하다고 생각이 들면 가져가 달라고 요청하는 것(Push의 반대라고 생각하면 편함)
Wiki: 지식을 체계적으로 정리(만들고 있는 소프트웨어의 사용설명서, 이 프로젝트에 참여하는 방법 등)
Insights: 프로젝트와 관련된 여러 가지 지표
